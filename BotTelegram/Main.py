import time
import telebot
import random

from pyexpat.errors import messages
from telebot import types

class RSP:
    def __init__(self, bot, osnova):
        self.bot = bot
        self.osnova = osnova

        self.bot.callback_query_handler(func=lambda call: True)(self.osnova.handle_callback)

    def CalData_RSP(self, call):
        self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!")
        self.bot.send_message(call.message.chat.id, "‚úÇüìÉüóø–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞üóøüìÉ‚úÇ")
        time.sleep(1)
        self.Start_RSP(call)

    def Start_RSP(self,call):
        markupRSP = types.InlineKeyboardMarkup()
        markupRSP.add(types.InlineKeyboardButton('üóø', callback_data='Stone'))
        markupRSP.add(types.InlineKeyboardButton('üìÉ', callback_data='Paper'))
        markupRSP.add(types.InlineKeyboardButton('‚úÇ', callback_data='Scissors'))

        self.bot.send_message(call.message.chat.id, "–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=markupRSP)

    def Start_Scissors(self, call):
        WinLose = random.randint(0,1)
        markupRSP2 = types.InlineKeyboardMarkup()
        markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
        markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        if WinLose == 0:
            self.osnova.Money += 10
            self.bot.send_message(call.message.chat.id, "–í—ã: ‚úÇ –í–µ–¥—É—â–∏–π: üìÉ")
            self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)
        else:
            self.osnova.Money -= 10
            self.bot.send_message(call.message.chat.id, "–í—ã: ‚úÇ –í–µ–¥—É—â–∏–π: üóø")
            self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)

    def Start_Paper(self, call):
        WinLose = random.randint(0,1)
        markupRSP2 = types.InlineKeyboardMarkup()
        markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
        markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        if WinLose == 0:
            self.osnova.Money += 10
            self.bot.send_message(call.message.chat.id, "–í—ã: üìÉ –í–µ–¥—É—â–∏–π: üóø")
            self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)
        else:
            self.osnova.Money -= 10
            self.bot.send_message(call.message.chat.id, "–í—ã: üìÉ –í–µ–¥—É—â–∏–π: ‚úÇ")
            self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)

    def Start_Stone(self, call):
        WinLose = random.randint(0,1)
        markupRSP2 = types.InlineKeyboardMarkup()
        markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
        markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        if WinLose == 0:
            self.osnova.Money += 10
            self.bot.send_message(call.message.chat.id, "–í—ã: üóø –í–µ–¥—É—â–∏–π: ‚úÇ")
            self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)
        else:
            self.osnova.Money -= 10
            self.bot.send_message(call.message.chat.id, "–í—ã: üóø –í–µ–¥—É—â–∏–π: üìÉ")
            self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å:{self.osnova.Money}‚ÇΩ", reply_markup=markupRSP2)




class Roulettee:
    def __init__(self, bot, osnova):
        self.bot = bot
        self.osnova = osnova

        self.bot.callback_query_handler(func=lambda call: True)(self.osnova.handle_callback)

    def CalData_Roulette(self, call):
        self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –†—É–ª–µ—Ç–∫–∞!")
        self.bot.send_message(call.message.chat.id, "üé∞–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –†—É–ª–µ—Ç–∫—Éüé∞")
        time.sleep(1)
        self.Start_Roulette(call)

    def Start_Roulette(self, call):
        Rulet_Mas = ["üçí","üçì","üçÜ","üíØ"]
        Result = [random.choice(Rulet_Mas) for _ in range(3)]
        result_message = " | ".join(Result)

        markupRoulette = types.InlineKeyboardMarkup()
        markupRoulette.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRoulette'))
        markupRoulette.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        if Result[0] == Result[1] == Result[2]:
            self.osnova.Money += 50
            result_message += f"\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50 –†—É–±–ª–µ–π. –í–∞—à –±–∞–ª–∞–Ω—Å: {self.osnova.Money}"
        else:
            self.osnova.Money -= 10
            result_message += f"\n–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π. –í–∞—à –±–∞–ª–∞–Ω—Å: {self.osnova.Money}"
        time.sleep(1)
        self.bot.send_message(call.message.chat.id, result_message, reply_markup=markupRoulette)


class Balanse:
    def __init__(self, bot, osnova):
        self.bot = bot
        self.osnova = osnova

    def ShowBalans(self, call):
        markupBalans = types.InlineKeyboardMarkup()
        markupBalans.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        self.bot.send_message(call.message.chat.id, f"–ë–∞–ª–∞–Ω—Å: {self.osnova.Money}‚ÇΩ", reply_markup=markupBalans)


class Dise_Game:
    def __init__(self, bot, osnova):
        self.bot = bot
        self.osnova = osnova

        self.bot.callback_query_handler(func=lambda call: True)(self.osnova.handle_callback)


    def CalData_Dice(self, call):
        self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –ö–æ—Å—Ç–∏!")
        self.bot.send_message(call.message.chat.id, "üé≤–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∫–æ—Å—Ç–∏üé≤")
        time.sleep(1)
        self.Start_Dice(call)

    def Start_Dice(self,call):
        dice_Player = random.randint(1,6)
        dice_Host = random.randint(1,6)
        self.bot.delete_message(call.message.chat.id, call.message.message_id)
        self.bot.send_message(call.message.chat.id, f"–í—ã:{dice_Player}, –•–æ–∑—è–∏–Ω —Å—Ç–æ–ª–∞:{dice_Host}")

        markupDice = types.InlineKeyboardMarkup()
        markupDice.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='Restart'))
        markupDice.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

        if dice_Player > dice_Host:
            time.sleep(1)
            self.osnova.Money += 10
            self.bot.send_message(call.message.chat.id, f"–£—Ä–∞! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π. –í–∞—à –±–∞–ª–∞–Ω—Å: {self.osnova.Money})", reply_markup=markupDice)

        else:
            time.sleep(1)
            self.osnova.Money -= 10
            self.bot.send_message(call.message.chat.id, f"–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π. –í–∞—à –±–∞–ª–∞–Ω—Å: {self.osnova.Money})", reply_markup=markupDice)



class Osnova:
    def __init__(self, token):
        self.Money = 100

        self.bot = telebot.TeleBot(token)
        self.dice_game = Dise_Game(self.bot, self)
        self.balance = Balanse(self.bot, self)
        self.roulete = Roulettee(self.bot, self)
        self.rsp = RSP(self.bot, self)

        self.bot.message_handler(commands=['start'])(self.First_message)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)

    def First_message(self,messsgae):
        file = "./man.png"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ö–æ—Å—Ç–∏', callback_data='Dice'))
        markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='Balance'))
        markup.add(types.InlineKeyboardButton('–†—É–ª–µ—Ç–∫–∞', callback_data='Roulette'))
        markup.add(types.InlineKeyboardButton('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='RSP'))#Rock, scissors, paper

        with open(file, 'rb') as photo:
            self.bot.send_photo(messsgae.chat.id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å, –ß–µ–º –∂–µ–ª–∞–µ—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è?",
                                reply_markup=markup)

    def osnoMessage(self, call):
        self.bot.delete_message(call.message.chat.id, call.message.message_id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ö–æ—Å—Ç–∏', callback_data='Dice'))
        markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='Balance'))
        markup.add(types.InlineKeyboardButton('–†—É–ª–µ—Ç–∫–∞', callback_data='Roulette'))
        markup.add(types.InlineKeyboardButton('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='RSP'))  # Rock, scissors, paper

        self.bot.send_message(call.message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)


    def handle_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –∫–ª–∞—Å—Å Dise_Game"""
        if call.data == 'Dice':
            self.dice_game.CalData_Dice(call)
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == 'Back':
            self.osnoMessage(call)
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == 'Restart':
            self.dice_game.Start_Dice(call)
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == 'Balance':
            self.balance.ShowBalans(call)
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == 'Roulette':
            self.roulete.CalData_Roulette(call)
            self.bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == 'RestartRoulette':
            self.roulete.Start_Roulette(call)
        elif call.data == 'RSP':
            self.rsp.CalData_RSP(call)
        elif call.data == 'RestartRSP':
            self.rsp.Start_RSP(call)
        elif call.data == 'Scissors':
            self.rsp.Start_Scissors(call)
        elif call.data == 'Paper':
            self.rsp.Start_Paper(call)
        elif call.data == 'Stone':
            self.rsp.Start_Stone(call)


    def start_polling(self):
        self.bot.polling(none_stop=True)



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":

    token = "7965493672:AAFSFYz6jFT5c2TQ7UCUikMKRwiqmSa3Vqc"

    bot = Osnova(token)


    bot.start_polling()