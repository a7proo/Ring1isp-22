import time
from abc import ABC, abstractmethod

import telebot
import random
from pyexpat.errors import messages
from telebot import types


class CustomError(Exception):
    def __str__(self):
        print("–ö–∞—Ä—è–≤–∞—è –æ—à–∏–±–∫–∞")

class BalanceError(CustomError):
    def __str__(self):
        print("–ë–∞–ª–∞–Ω—Å –ø–æ—Ç–µ—Ä—è–ª–∏!!!")

class GameError(CustomError):
    def __str__(self):
        print("–í—Å—ë –∏–≥—Ä—ã –Ω–∞–∫—Ä—ã–ª–∏—Å—å.")

class ads(ABC):

    def __init__(self, bot, osnova):
        self.bot = bot
        self.osnova = osnova
        self._protected_attr = "–ú–µ–Ω—è –∑–∞—â–∏—Ç–∏–ª–∏"
        self.bot.callback_query_handler(func=lambda call: True)(self.osnova.handle_callback)

    def get_protected_attr(self):
        return self._protected_attr


class RSP(ads):
    try:
        def __init__(self, bot, osnova):
            super().__init__(bot, osnova)
            self.protected_attr = self.get_protected_attr()

        def CalData_RSP(self, call):
            self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!")
            self.bot.send_message(call.message.chat.id, "‚úÇüìÉüóø–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞üóøüìÉ‚úÇ")
            print(f"–Ø –¥–æ—Å—Ç–∞–ª –µ–≥–æ: {self.protected_attr}")
            time.sleep(1)
            self.Start_RSP(call)

    except Exception as e:
        raise GameError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: {e}")

    finally:
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    def Start_RSP(self, call):
        markupRSP = types.InlineKeyboardMarkup()
        markupRSP.add(types.InlineKeyboardButton('üóø', callback_data='Stone'))
        markupRSP.add(types.InlineKeyboardButton('üìÉ', callback_data='Paper'))
        markupRSP.add(types.InlineKeyboardButton('‚úÇ', callback_data='Scissors'))

        self.bot.send_message(call.message.chat.id, "–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=markupRSP)

    def Start_Scissors(self, call):
        try:
            WinLose = random.randint(0, 1)
            markupRSP2 = types.InlineKeyboardMarkup()
            markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
            markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            user_id = call.message.chat.id

            if WinLose == 0:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance + 10)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                self.bot.send_message(call.message.chat.id, "–í—ã: ‚úÇ –í–µ–¥—É—â–∏–π: üìÉ")
                self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance + 10}‚ÇΩ",
                                  reply_markup=markupRSP2)
            else:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance - 10)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                self.bot.send_message(call.message.chat.id, "–í—ã: ‚úÇ –í–µ–¥—É—â–∏–π: üóø")
                self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance - 10}‚ÇΩ",
                                  reply_markup=markupRSP2)
        except BalanceError as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")

        except Exception as e:
            raise GameError(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞.")

    def Start_Paper(self, call):
        try:
            WinLose = random.randint(0, 1)
            markupRSP2 = types.InlineKeyboardMarkup()
            markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
            markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            user_id = call.message.chat.id

            if WinLose == 0:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance + 10)
                self.bot.send_message(call.message.chat.id, "–í—ã: üìÉ –í–µ–¥—É—â–∏–π: üóø")
                self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance + 10}‚ÇΩ",
                                  reply_markup=markupRSP2)
            else:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance + 10)
                self.bot.send_message(call.message.chat.id, "–í—ã: üìÉ –í–µ–¥—É—â–∏–π: ‚úÇ")
                self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance - 10}‚ÇΩ",
                                  reply_markup=markupRSP2)
        except BalanceError as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")

        except Exception as e:
            raise GameError(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞.")

    def Start_Stone(self, call):
        try:
            WinLose = random.randint(0, 1)
            markupRSP2 = types.InlineKeyboardMarkup()
            markupRSP2.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRSP'))
            markupRSP2.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            user_id = call.message.chat.id

            if WinLose == 0:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance + 10)
                self.bot.send_message(call.message.chat.id, "–í—ã: üóø –í–µ–¥—É—â–∏–π: ‚úÇ")
                self.bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance + 10}‚ÇΩ",
                                      reply_markup=markupRSP2)
            else:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance - 10)
                self.bot.send_message(call.message.chat.id, "–í—ã: üóø –í–µ–¥—É—â–∏–π: üìÉ")
                self.bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π –ë–∞–ª–∞–Ω—Å: {current_balance - 10}‚ÇΩ",
                                      reply_markup=markupRSP2)
        except BalanceError as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")

        except Exception as e:
            raise GameError(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞.")


class Roulettee(ads):
    try:
        def CalData_Roulette(self, call):
            self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –†—É–ª–µ—Ç–∫–∞!")
            self.bot.send_message(call.message.chat.id, "üé∞–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –†—É–ª–µ—Ç–∫—Éüé∞")
            time.sleep(1)
            self.Start_Roulette(call)
            testMass = [[1, 2, 3],
                        [4, 5, 42],
                        [7, 8, 9]
                                ]
            print(testMass[1][2])
    except Exception as e:
        raise GameError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã —Ä—É–µ—Ç–∫–∞: {e}")

    finally:
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞.")

    def Start_Roulette(self, call):
        try:
            Rulet_Mas = ["üçí", "üçì", "üçÜ", "üíØ"]

            Result = [random.choice(Rulet_Mas) for _ in range(3)]
            result_message = " | ".join(Result)

            user_id = call.message.chat.id

            markupRoulette = types.InlineKeyboardMarkup()
            markupRoulette.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='RestartRoulette'))
            markupRoulette.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            if Result[0] == Result[1] == Result[2]:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance + 150)
                self.bot.send_message(call.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 150 –†—É–±–ª–µ–π.")
            else:
                current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.osnova.set_user_balance(user_id, current_balance - 10)
                self.bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π.")
            time.sleep(1)
            self.bot.send_message(call.message.chat.id, result_message, reply_markup=markupRoulette)
        except BalanceError as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")

        except Exception as e:
            raise GameError(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –†—É–ª–µ—Ç–∫–∞: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞")


class Balanse(ads):
    try:
        def ShowBalans(self, call):
            markupBalans = types.InlineKeyboardMarkup()
            markupBalans.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            user_id = call.message.chat.id

            current_balance = self.osnova.get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.send_message(call.message.chat.id, f"–ë–∞–ª–∞–Ω—Å: {current_balance}‚ÇΩ", reply_markup=markupBalans)
    except BalanceError as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")
    finally:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–Ω—Å–∞.")


class Dise_Game(ads):
    try:
        def CalData_Dice(self, call):
            self.bot.answer_callback_query(call.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –ö–æ—Å—Ç–∏!")
            self.bot.send_message(call.message.chat.id, "üé≤–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∫–æ—Å—Ç–∏üé≤")
            time.sleep(1)
            self.Start_Dice(call)
    except Exception as e:
        raise GameError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã –ö–æ—Å—Ç–∏: {e}")

    finally:
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–æ—Å—Ç–∏.")

    def Start_Dice(self, call):
        try:
            dice_Player = random.randint(1, 6)
            dice_Host = random.randint(1, 6)
            self.bot.send_message(call.message.chat.id, f"–í—ã:{dice_Player}, –•–æ–∑—è–∏–Ω —Å—Ç–æ–ª–∞:{dice_Host}")

            markupDice = types.InlineKeyboardMarkup()
            markupDice.add(types.InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–æ–≤–∞', callback_data='Restart'))
            markupDice.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back'))

            user_id = call.message.chat.id

            if dice_Player > dice_Host:
                time.sleep(1)
                current_balance = self.osnova.get_user_balance(user_id)
                self.osnova.set_user_balance(user_id, current_balance + 10)
                self.bot.send_message(call.message.chat.id, f"–£—Ä–∞! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π. –ë–∞–ª–∞–Ω—Å: {current_balance + 10}‚ÇΩ",
                                      reply_markup=markupDice)

            else:
                time.sleep(1)
                current_balance = self.osnova.get_user_balance(user_id)
                self.osnova.set_user_balance(user_id, current_balance - 10)
                self.bot.send_message(call.message.chat.id,f"–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 –†—É–±–ª–µ–π.–ë–∞–ª–∞–Ω—Å: {current_balance - 10}‚ÇΩ",
                                      reply_markup=markupDice)
        except BalanceError as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {e}")

        except Exception as e:
            raise GameError(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö–æ—Å—Ç–∏: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ö–æ—Å—Ç–∏.")



class Osnova:
    def __init__(self, token):
        self.user_balances = {}
        self.bot = telebot.TeleBot(token)
        self.dice_game = Dise_Game(self.bot, self)
        self.balance = Balanse(self.bot, self)
        self.roulete = Roulettee(self.bot, self)
        self.rsp = RSP(self.bot, self)

        self.bot.message_handler(commands=['start'])(self.First_message)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)

    def get_user_balance(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.user_balances.get(user_id, 100)  # –ë–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100

    def set_user_balance(self, user_id, amount):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_balances[user_id] = amount

    def First_message(self, message):
        file = "./man.png"


        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ö–æ—Å—Ç–∏', callback_data='Dice'))
        markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='Balance'))
        markup.add(types.InlineKeyboardButton('–†—É–ª–µ—Ç–∫–∞', callback_data='Roulette'))
        markup.add(types.InlineKeyboardButton('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='RSP'))  # Rock, scissors, paper

        with open(file, 'rb') as photo:
            self.bot.send_photo(message.chat.id, photo,
                                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å, –ß–µ–º –∂–µ–ª–∞–µ—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è?",
                                reply_markup=markup)

    def osnoMessage(self, call):
        self.bot.delete_message(call.message.chat.id, call.message.message_id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ö–æ—Å—Ç–∏', callback_data='Dice'))
        markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='Balance'))
        markup.add(types.InlineKeyboardButton('–†—É–ª–µ—Ç–∫–∞', callback_data='Roulette'))
        markup.add(types.InlineKeyboardButton('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='RSP'))  # Rock, scissors, paper

        self.bot.send_message(call.message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    def handle_callback(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –∫–ª–∞—Å—Å Dise_Game"""
        if call.data == 'Dice':
            self.dice_game.CalData_Dice(call)
        elif call.data == 'Back':
            self.osnoMessage(call)
        elif call.data == 'Restart':
            self.dice_game.Start_Dice(call)
        elif call.data == 'Balance':
            self.balance.ShowBalans(call)
        elif call.data == 'Roulette':
            self.roulete.CalData_Roulette(call)
        elif call.data == 'RestartRoulette':
            self.roulete.Start_Roulette(call)
        elif call.data == 'RSP':
            self.rsp.CalData_RSP(call)
        elif call.data == 'RestartRSP':
            self.rsp.Start_RSP(call)
        elif call.data == 'Scissors':
            self.rsp.Start_Scissors(call)
        elif call.data == 'Paper':
            self.rsp.Start_Paper(call)
        elif call.data == 'Stone':
            self.rsp.Start_Stone(call)

    def start_polling(self):
        self.bot.polling(none_stop=True)



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    token = ""

    bot = Osnova(token)

    bot.start_polling()



    class Cell:
        def __init__(self, value):
            self.value = value

        def __repr__(self):
            return f"Cell({self.value})"

    rows = 3
    cols = 4

    grid = [[Cell((i, j)) for j in range(cols)] for i in range(rows)]

    for row in grid:
        print(row)
